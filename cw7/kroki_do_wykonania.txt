cd "C:\Program Files\PostgreSQL\14\bin"


raster2pgsql.exe -s 3763 -N -32767 -t 100x100 -I -C -M -d C:\Users\szymi\Desktop\semestrV\spatial_databases\Spatial-databases\cw7\rasters\srtm_1arc_v3.tif rasters.dem | psql -d cw7 -h localhost -U postgres -p 5432


raster2pgsql.exe -s 3763 -N -32767 -t 128x128 -I -C -M -d C:\Users\szymi\Desktop\semestrV\spatial_databases\Spatial-databases\cw7\rasters\Landsat8_L1TP_RGBN.tif rasters.landsat8 | psql -d cw7 -h localhost -U postgres -p 5432


-- 1) Tworzenie rastrów z istniejących rastrów i interakcja z wektorami


-- 1.1) ST_Intersects

-- a) Przecięcie rastra z wektorem
CREATE TABLE cogiel.intersects AS
SELECT a.rast, b.municipality
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE ST_Intersects(a.rast, b.geom) AND b.municipality ilike 'porto';

-- b) dodanie serial primary key:
alter table cogiel.intersects
add column rid SERIAL PRIMARY KEY;

-- c) dodanie raster constraints
SELECT AddRasterConstraints('cogiel'::name,
'intersects'::name,'rast'::name);


-- 1.2) ST_Clip

-- Obcinanie rastra na podstawie wektora.

CREATE TABLE cogiel.clip AS
SELECT ST_Clip(a.rast, b.geom, true), b.municipality
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE ST_Intersects(a.rast, b.geom) AND b.municipality like 'PORTO';


-- 1.3) ST_Union

-- Połączenie wielu kafelków w jeden raster

CREATE TABLE cogiel.union AS
SELECT ST_Union(ST_Clip(a.rast, b.geom, true))
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast);




-- 2) Tworzenie rastrów z wektorów (rastrowanie)

-- 2.1) ST_AsRaster

-- Przykład pokazuje użycie funkcji ST_AsRaster w celu rastrowania tabeli z parafiami o takiej
samej charakterystyce przestrzennej tj.: wielkość piksela, zakresy itp.

CREATE TABLE cogiel.porto_parishes AS
WITH r AS (
SELECT rast FROM rasters.dem
LIMIT 1
)
SELECT ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767) AS rast
FROM vectors.porto_parishes AS a, r
WHERE a.municipality ilike 'porto';

-- 2.2) ST_Union

DROP TABLE cogiel.porto_parishes; --> drop table porto_parishes first
CREATE TABLE cogiel.porto_parishes AS
WITH r AS (
SELECT rast FROM rasters.dem
LIMIT 1
)
SELECT st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767)) AS rast
FROM vectors.porto_parishes AS a, r
WHERE a.municipality ilike 'porto';


-- 2.3) ST_Tile
-- Po uzyskaniu pojedynczego rastra można generować kafelki za pomocą funkcji ST_Tile

DROP TABLE cogiel.porto_parishes; --> drop table porto_parishes first
CREATE TABLE cogiel.porto_parishes AS
WITH r AS (
SELECT rast FROM rasters.dem
LIMIT 1 )
SELECT st_tile(st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-
32767)),128,128,true,-32767) AS rast
FROM vectors.porto_parishes AS a, r
WHERE a.municipality ilike 'porto';




-- 3) Konwertowanie rastrów na wektory (wektoryzowanie)
 
-- 3.1) ST_Intersection


create table schema_name.intersection as
SELECT
a.rid,(ST_Intersection(b.geom,a.rast)).geom,(ST_Intersection(b.geom,a.rast)
).val
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);


-- 3.2) ST_DumpAsPolygons
-- ST_DumpAsPolygons konwertuje rastry w wektory (poligony).

CREATE TABLE cogiel.dumppolygons AS
SELECT
a.rid,(ST_DumpAsPolygons(ST_Clip(a.rast,b.geom))).geom,(ST_DumpAsPolygons(ST_Clip(a.rast,b.geom))).val
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);


-- 4) Analiza rastrow

-- 4.1) ST_Band
-- Funkcja ST_Band służy do wyodrębniania pasm z rastra

CREATE TABLE schema_name.landsat_nir AS
SELECT rid, ST_Band(rast,4) AS rast
FROM rasters.landsat8;

-- 4.2) ST_Clip
-- T_Clip może być użyty do wycięcia rastra z innego rastra. Poniższy przykład wycina jedną parafię
z tabeli vectors.porto_parishes. Wynik będzie potrzebny do wykonania kolejnych przykładów.

CREATE TABLE schema_name.paranhos_dem AS
SELECT a.rid,ST_Clip(a.rast, b.geom,true) as rast
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

-- 4.3) ST_Slope
-- Poniższy przykład użycia funkcji ST_Slope wygeneruje nachylenie przy użyciu
poprzednio wygenerowanej tabeli (wzniesienie).

CREATE TABLE cogiel.paranhos_slope AS
SELECT a.rid,ST_Slope(a.rast,1,'32BF','PERCENTAGE') as rast
FROM cogiel.paranhos_dem AS a;

-- 4.4) ST_Reclass
-- Aby zreklasyfikować raster należy użyć funkcji ST_Reclass.

CREATE TABLE cogiel.paranhos_slope_reclass AS
SELECT a.rid,ST_Reclass(a.rast,1,']0-15]:1, (15-30]:2, (30-9999:3',
'32BF',0)
FROM cogiel.paranhos_slope AS a;

-- 4.5) ST_SummaryStats

SELECT st_summarystats(a.rast) AS stats
FROM cogiel.paranhos_dem AS a;


-- 4.6) ST_SummaryStats oraz Union
-- Przy użyciu UNION można wygenerować jedną statystykę wybranego rastra.

SELECT st_summarystats(ST_Union(a.rast))
FROM schema_name.paranhos_dem AS a;


-- 4.7) ST_SummaryStats z lepszą kontrolą złożonego typu danych

WITH t AS (
SELECT st_summarystats(ST_Union(a.rast)) AS stats
FROM schema_name.paranhos_dem AS a
)
SELECT (stats).min,(stats).max,(stats).mean FROM t;


-- 4.8) ST_SummaryStats w połączeniu z GROUP BY
-- Aby wyświetlić statystykę dla każdego poligonu "parish" można użyć polecenia GROUP BY


WITH t AS (
SELECT b.parish AS parish, st_summarystats(ST_Union(ST_Clip(a.rast,
b.geom,true))) AS stats
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
group by b.parish
)
SELECT parish,(stats).min,(stats).max,(stats).mean FROM t;


-- 4.9) ST_Value
-- Funkcja ST_Value pozwala wyodrębnić wartość piksela z punktu lub zestawu punktów.
-- Poniższy przykład wyodrębnia punkty znajdujące się w tabeli vectors.places.

SELECT b.name,st_value(a.rast,(ST_Dump(b.geom)).geom)
FROM
rasters.dem a, vectors.places AS b
WHERE ST_Intersects(a.rast,b.geom)
ORDER BY b.name;


-- 4.10) ST_TPI

-- a) Utworzenie mapy TPI

create table cogiel.tpi30 as
select ST_TPI(a.rast,1) as rast
from rasters.dem a;


-- b) Poniższa kwerenda utworzy indeks przestrzenny
CREATE INDEX idx_tpi30_rast_gist ON schema_name.tpi30
USING gist (ST_ConvexHull(rast));


-- c) Dodanie constraintów

SELECT AddRasterConstraints('cogiel'::name,
'tpi30'::name,'rast'::name);


-- TASK 1
-- Problem do samodzielnego rozwiązania
-- Przetwarzanie poprzedniego zapytania może potrwać dłużej niż minutę, a niektóre zapytania mogą
-- potrwać zbyt długo. W celu skrócenia czasu przetwarzania czasami można ograniczyć obszar
-- zainteresowania i obliczyć mniejszy region. Dostosuj zapytanie z przykładu 10, aby przetwarzać tylko
-- gminę Porto. Musisz użyć ST_Intersects, sprawdź Przykład 1 - ST_Intersects w celach
-- informacyjnych. Porównaj różne czasy przetwarzania. Na koniec sprawdź wynik w QGIS.


CREATE TABLE cogiel.tpi30porto AS
WITH porto AS (
	SELECT a.rast
	FROM rasters.dem AS a, vectors.porto_parishes AS b
	WHERE ST_Intersects(a.rast, b.geom) AND b.municipality ILIKE 'porto'
)
SELECT ST_TPI(porto.rast,1) AS rast FROM porto;


-- 5) ALGEBRA MAP

-- 5.1) Wyrażenie Algebry Map NDVI

-- a)
CREATE TABLE cogiel.porto_ndvi AS
WITH r AS (
SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
)
SELECT
	r.rid,ST_MapAlgebra(
	r.rast, 1,
	r.rast, 4,
	'([rast2.val] - [rast1.val]) / ([rast2.val] +
	[rast1.val])::float','32BF'
) AS rast
FROM r;

-- b) indeks przestrzenny na wcześniej stworzonej tabeli

CREATE INDEX idx_porto_ndvi_rast_gist ON cogiel.porto_ndvi
USING gist (ST_ConvexHull(rast));


-- c) Dodanie constraintów

SELECT AddRasterConstraints('cogiel'::name,
'porto_ndvi'::name,'rast'::name);


-- 5.2) Funkcja zwrotna
-- a)

create or replace function schema_name.ndvi(
value double precision [] [] [],
pos integer [][],
VARIADIC userargs text []
)
RETURNS double precision AS
$$
BEGIN
--RAISE NOTICE 'Pixel Value: %', value [1][1][1];-->For debug
purposes
RETURN (value [2][1][1] - value [1][1][1])/(value [2][1][1]+value
[1][1][1]); --> NDVI calculation!
END;
$$
LANGUAGE 'plpgsql' IMMUTABLE COST 1000;

-- b)
CREATE TABLE cogiel.porto_ndvi2 AS
WITH r AS (
SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
)
SELECT
r.rid,ST_MapAlgebra(
r.rast, ARRAY[1,4],
'cogiel.ndvi(double precision[],
integer[],text[])'::regprocedure, --> This is the function!
'32BF'::text
) AS rast
FROM r;


-- c) Dodanie indeksu przestrzennego
CREATE INDEX idx_porto_ndvi2_rast_gist ON schema_name.porto_ndvi2
USING gist (ST_ConvexHull(rast));

-- d) Dodanie constrainów

SELECT AddRasterConstraints('cogiel'::name,
'porto_ndvi2'::name,'rast'::name);



-- 6) Eksport danych

-- 6.1) ST_AsTiff
SELECT ST_AsTiff(ST_Union(rast))
FROM cogiel.porto_ndvi;

-- 6.2) ST_AsGDALRaster
SELECT ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE',
'PREDICTOR=2', 'PZLEVEL=9'])
FROM cogiel.porto_ndvi;


-- 6.3) 
-- lista formatów obsługiwanych przez GDAL
SELECT ST_GDALDrivers();

-- 6.4)

CREATE TABLE tmp_out AS
SELECT lo_from_bytea(0,
ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE',
'PREDICTOR=2', 'PZLEVEL=9'])
) AS loid
FROM cogiel.porto_ndvi;


-- 6.5)
SELECT lo_export(loid, 'C:\Users\szymi\Desktop\semestrV\spatial_databases\Spatial-databases\cw7\myraster.tiff') FROM tmp_out;
SELECT lo_unlink(loid) FROM tmp_out;